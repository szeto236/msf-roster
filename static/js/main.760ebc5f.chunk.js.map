{"version":3,"sources":["hooks/useSheetApi.tsx","components/Character.tsx","components/GlobalStyles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useSheetApi","_ref","spreadsheetId","sheetRange","apiKey","majorDimension","_useState","useState","values","_useState2","Object","slicedToArray","data","setData","useEffect","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","axios","concat","sent","stop","apply","this","arguments","fetchData","fontStyle","css","_templateObject","Wrapper","styled","div","_templateObject2","ImageWrapper","_templateObject3","CircleBg","_templateObject4","CharName","_templateObject5","InfoOverlay","_templateObject6","Level","_templateObject7","Power","_templateObject8","StarList","ul","_templateObject9","StarListItem","li","_templateObject10","Character","imageUrl","charName","level","power","star","rStar","react","src","alt","R","starIcon","color","index_es","icon","size","countYellowStars","redStar","yellowStar","restStar","getStars","defaultProps","GlobalStyles","createGlobalStyle","GlobalStyles_templateObject","library","add","faStar","GridWrapper","App_templateObject","App","objectSpread","process","react_default","createElement","map","char","components_Character","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.760ebc5f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\ntype hooksType = {\n  spreadsheetId: string;\n  sheetRange: string;\n  apiKey: string;\n  majorDimension: string;\n};\n\nfunction useSheetApi({\n  spreadsheetId,\n  sheetRange,\n  apiKey,\n  majorDimension\n}: hooksType) {\n  const [data, setData] = useState({ values: [] });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetRange}?key=${apiKey}&majorDimension=${majorDimension}`\n      );\n\n      setData({ values: result.data.values });\n    };\n\n    fetchData();\n  }, [spreadsheetId, sheetRange, apiKey, majorDimension]);\n\n  return data;\n}\n\nexport default useSheetApi;\n","import * as React from \"react\";\nimport * as R from \"ramda\";\nimport styled, { css } from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst fontStyle = css`\n  text-transform: uppercase;\n  font-family: \"Mukta Mahee\", sans-serif;\n  font-weight: 600;\n  line-height: 0.9;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  position: relative;\n  padding: 10px;\n  margin: 0.5em 0;\n`;\n\nconst ImageWrapper = styled.div`\n  border-radius: 0 0 50% 50%;\n  overflow: hidden;\n  z-index: 3;\n`;\n\nconst CircleBg = styled.div`\n  background: radial-gradient(\n    ellipse at center,\n    hsla(0, 0%, 8%, 0) 50%,\n    #141414 100%\n  );\n  border-radius: 50px;\n  border: 2px solid #464646;\n  height: 73px;\n  position: absolute;\n  top: 44px;\n  width: 73px;\n  z-index: 2;\n  transition: all 0.3s ease;\n`;\n\nconst CharName = styled.div`\n  ${fontStyle};\n  color: #fff;\n  font-size: 14px;\n  transform: skewX(-15deg);\n`;\n\nconst InfoOverlay = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  bottom: -10px;\n  left: 0;\n  right: 0;\n  width: 100%;\n  z-index: 4;\n`;\n\nconst Level = styled.div`\n  ${fontStyle};\n  color: #eaeaea;\n  font-size: 14px;\n  transform: skewX(-15deg);\n  z-index: 4;\n`;\n\nconst Power = styled.div`\n  ${fontStyle};\n  color: #ffff8e;\n  font-size: 26px;\n  transform: skewX(-15deg);\n  z-index: 4;\n`;\n\nconst StarList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n`;\n\nconst StarListItem = styled.li``;\n\ntype PropsType = {\n  imageUrl: string;\n  charName: string;\n  star: string;\n  rStar: string;\n  level: string;\n  power: string;\n};\n\nexport const getStars = (rStar: string, star: string) => {\n  const starIcon = (color: string) => (\n    <StarListItem>\n      <FontAwesomeIcon icon=\"star\" color={color} size=\"xs\" />\n    </StarListItem>\n  );\n  const countYellowStars = +star - +rStar;\n  const redStar = R.repeat(starIcon(\"#d41f1f\"), +rStar);\n  const yellowStar =\n    countYellowStars > 0 && R.repeat(starIcon(\"#ffff8e\"), countYellowStars);\n  const restStar =\n    (7 - +star >= 0 && R.repeat(starIcon(\"#999\"), 7 - +star)) || null;\n\n  return (\n    <React.Fragment>\n      {redStar}\n      {yellowStar}\n      {7 - +star >= 0 && restStar}\n    </React.Fragment>\n  );\n};\n\nconst Character = ({\n  imageUrl,\n  charName,\n  level,\n  power,\n  star,\n  rStar\n}: PropsType) => {\n  return (\n    <Wrapper>\n      <ImageWrapper>\n        <img src={imageUrl} alt={charName} />\n      </ImageWrapper>\n      <CircleBg />\n      <InfoOverlay>\n        <Level>LVL {level}</Level>\n        <Power>{R.replace(\",\", \"\", power)}</Power>\n        <CharName>{charName}</CharName>\n        <StarList>{getStars(rStar, star)}</StarList>\n      </InfoOverlay>\n    </Wrapper>\n  );\n};\n\nCharacter.defaultProps = {\n  power: \"0\",\n  imageUrl: \"\",\n  charName: \"\",\n  level: \"0\",\n  star: \"0\",\n  rStar: \"0\"\n};\n\nexport default Character;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: #282828;\n    line-height: 1.4;\n  }\n`;\n","import React from \"react\";\nimport useSheetApi from \"./hooks/useSheetApi\";\nimport Character from \"./components/Character\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\";\n\nlibrary.add(faStar);\n\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 2fr);\n  grid-template-rows: auto;\n`;\n\nconst App: React.FC = () => {\n  const params = {\n    spreadsheetId: \"1XoNQlKdUsCMQ0Ew6g5q_nqQuJMccv8XrAbkDypJQdqI\",\n    sheetRange: \"Roster!A3:W102\",\n    apiKey: process.env.REACT_APP_API_KEY as string,\n    majorDimension: \"ROWS\"\n  };\n  const data = useSheetApi({ ...params });\n\n  return (\n    <GridWrapper>\n      <GlobalStyles />\n      {data.values.map(char => {\n        const imageUrl = `${process.env.PUBLIC_URL}/images/${char[1]}.png`;\n        return (\n          <Character\n            key={char[2]}\n            imageUrl={imageUrl}\n            charName={char[2]}\n            star={char[12]}\n            rStar={char[13]}\n            level={char[14]}\n            power={char[20]}\n          />\n        );\n      })}\n    </GridWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}