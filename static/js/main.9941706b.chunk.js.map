{"version":3,"sources":["components/GlobalStyles.tsx","hooks/useSheetApi.tsx","utils/filterArrayValue.ts","components/TierGrow.tsx","components/Character.tsx","components/Roster.tsx","containers/Roster.tsx","utils/getTotalPower.ts","components/Teams.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","_templateObject","useSheetApi","_ref","spreadsheetId","sheetRange","apiKey","majorDimension","_useState","useState","values","_useState2","Object","slicedToArray","data","setData","useEffect","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","axios","concat","sent","stop","apply","this","arguments","fetchData","filterArrayValueByArray","arr","R","val","filterArrayValue","TierGrow","tier","className","growColor","secondaryGrowColor","react_default","createElement","width","height","cx","cy","r","stroke","strokeWidth","fill","Fragment","strokeDasharray","fontStyle","css","Character_templateObject","Wrapper","styled","div","withConfig","displayName","componentId","ImageWrapper","CircleBg","CharName","InfoOverlay","Level","Power","StarList","ul","StyledTierGrow","StarListItem","li","StarIcon","color","icon","react","react_fontawesome_index_es","size","Character","imageUrl","charName","level","power","star","rStar","stars","redStar","restStar","greyStar","yellowStar","emptyRStar","getStars","src","alt","Character_StarIcon","defaultProps","GridWrapper","Roster","computeData","map","char","process","components_Character","key","params","RosterContainer","useContext","StateContext","setComputeData","traits","objectSpread","traitsChars","trait","i","onClick","components_Roster","getTotalPowers","Number","getTotalPower","powers","section","Teams_templateObject","NarrowedCharList","_templateObject2","Header","header","_templateObject3","Title","h3","_templateObject4","PowerText","span","_templateObject5","PowerAmount","_templateObject6","Teams","techTeam","techTeamPower","shieldTeam","shieldTeamPower","defendersTeam","defendersTeamPower","brotherhoodTeam","brotherhoodTeamPower","guardiansTeam","guardiansTeamPower","spiderVerseTeam","spiderVerseTeamPower","Teams_GridWrapper","TabPane","StyledTabs","App_templateObject","createContext","library","add","fasFaStar","farFaStar","App","Provider","value","tabs_default","defaultActiveKey","animated","tabPane","inkBar","tab","containers_Roster","components_Teams","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9941706b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  @font-face {\n      font-family: Ultimus;\n      font-weight: 300;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/a2bf336aff03d67fc55372e083f073c4.woff)\n  }\n\n  @font-face {\n      font-family: Ultimus;\n      font-weight: 400;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/a01615b5087744969beadbbd784e1295.woff)\n  }\n\n  @font-face {\n      font-family: Ultimus;\n      font-weight: 500;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/389705037732e181a25966e6185b0f57.woff)\n  }\n\n  @font-face {\n      font-family: Ultimus;\n      font-weight: 700;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/9d703ae86e98db0253a254b96016f116.woff)\n  }\n\n  @font-face {\n      font-family: Teko;\n      font-weight: 300;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/05d811b921da083e601eee1219c3734f.woff)\n  }\n\n  @font-face {\n      font-family: Teko;\n      font-weight: 400;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/ba74f5ca0bebce1385b10579c15b95c5.woff)\n  }\n\n  @font-face {\n      font-family: Teko;\n      font-weight: 500;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/0e74be7d7f5087002d8b1efe9fcdfe19.woff)\n  }\n\n  @font-face {\n      font-family: Teko;\n      font-weight: 700;\n      src: url(https://s3.amazonaws.com/marvelstrikeforce-assets/prod2/9c1f8d196285181b5313a2146a5453d6.woff)\n  }\n\n  body {\n    background: #282828;\n    line-height: 1.4;\n    color: #fff;\n    font-family: Ultimus,Arial,Helvetica,sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-weight: 400;\n  }\n\n  :root {\n    --yellow: #ffff8e;\n    --light-grey: #eaeaea;\n    --red: #d41f1f;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\ntype hooksType = {\n  spreadsheetId: string;\n  sheetRange: string;\n  apiKey: string;\n  majorDimension: string;\n};\n\nfunction useSheetApi({\n  spreadsheetId,\n  sheetRange,\n  apiKey,\n  majorDimension\n}: hooksType) {\n  const [data, setData] = useState({ values: [] });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetRange}?key=${apiKey}&majorDimension=${majorDimension}`\n      );\n\n      setData({ values: result.data.values });\n    };\n\n    fetchData();\n  }, [spreadsheetId, sheetRange, apiKey, majorDimension]);\n\n  return data;\n}\n\nexport default useSheetApi;\n","import * as R from \"ramda\";\n\nexport const filterArrayValue = (\n  data: any[][],\n  val: string | string[]\n): any[][] => R.filter(R.where([R.contains(`${val}`)]), data);\n\nexport const filterArrayValueByArray = (data: any[][], arr: string[]) =>\n  R.map(val => R.flatten(filterArrayValue(data, val)), arr);\n","import React from \"react\";\n\ntype PropsType = {\n  tier: number;\n  className?: string;\n};\n\nconst TierGrow = ({ tier, className }: PropsType) => {\n  let growColor = \"transparent\";\n  let secondaryGrowColor = \"transparent\";\n\n  if (tier > 1 && tier < 5) {\n    growColor = \"#00ff00\";\n    secondaryGrowColor = \"#004d00\";\n  } else if (tier >= 5 && tier < 9) {\n    growColor = \"#56aeff\";\n    secondaryGrowColor = \"#355a7d\";\n  } else if (tier >= 9) {\n    growColor = \"#ff00ff\";\n    secondaryGrowColor = \"#660066\";\n  }\n\n  return (\n    <svg width=\"120\" height=\"120\" className={className}>\n      {tier % 4 === 1 && (\n        <circle\n          cx=\"60\"\n          cy=\"77\"\n          r=\"40\"\n          stroke={growColor}\n          strokeWidth=\"2\"\n          fill=\"transparent\"\n        />\n      )}\n      {tier % 4 === 2 && (\n        <React.Fragment>\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"40\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"55\"\n            stroke={growColor}\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"59\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n        </React.Fragment>\n      )}\n      {tier % 4 === 3 && (\n        <React.Fragment>\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"40\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"46\"\n            stroke={growColor}\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"50\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"58\"\n            stroke={secondaryGrowColor}\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n          />\n        </React.Fragment>\n      )}\n      {tier !== 0 && tier % 4 === 0 && (\n        <React.Fragment>\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"40\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"46\"\n            stroke={growColor}\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"50\"\n            stroke={growColor}\n            strokeWidth=\"1\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"58\"\n            stroke={secondaryGrowColor}\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"57\"\n            strokeDasharray=\"40,20,60\"\n            stroke={growColor}\n            strokeWidth=\"2\"\n            fill=\"transparent\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"77\"\n            r=\"60\"\n            strokeDasharray=\"100,100\"\n            stroke={growColor}\n            strokeWidth=\"2\"\n            fill=\"transparent\"\n          />\n        </React.Fragment>\n      )}\n    </svg>\n  );\n};\n\nexport default TierGrow;\n","import * as React from \"react\";\nimport * as R from \"ramda\";\nimport styled, { css } from \"styled-components/macro\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TierGrow from \"./TierGrow\";\n\nconst fontStyle = css`\n  text-transform: uppercase;\n  font-weight: 500;\n  line-height: 0.9;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  position: relative;\n  padding: 10px;\n  margin: 0.5em 0;\n`;\n\nconst ImageWrapper = styled.div`\n  border-radius: 0 0 50% 50%;\n  overflow: hidden;\n  z-index: 3;\n`;\n\nconst CircleBg = styled.div`\n  background: radial-gradient(\n    ellipse at center,\n    hsla(0, 0%, 8%, 0) 50%,\n    #141414 100%\n  );\n  border-radius: 50px;\n  border: 2px solid #464646;\n  height: 73px;\n  position: absolute;\n  top: 44px;\n  width: 73px;\n  z-index: -1;\n  transition: all 0.3s ease;\n`;\n\nconst CharName = styled.div`\n  ${fontStyle};\n  color: #fff;\n  font-size: 14px;\n  transform: skewX(-15deg);\n`;\n\nconst InfoOverlay = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  bottom: -10px;\n  left: 0;\n  right: 0;\n  width: 100%;\n  z-index: 4;\n`;\n\nconst Level = styled.div`\n  ${fontStyle};\n  color: var(--light-grey);\n  font-size: 14px;\n  transform: skewX(-15deg);\n  z-index: 4;\n`;\n\nconst Power = styled.div`\n  ${fontStyle};\n  color: var(--yellow);\n  font-size: 26px;\n  transform: skewX(-15deg);\n  z-index: 4;\n`;\n\nconst StarList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n`;\n\nconst StyledTierGrow = styled(TierGrow)`\n  position: absolute;\n  top: 4px;\n  z-index: -1;\n  overflow: visible;\n`;\n\nconst StarListItem = styled.li``;\n\ntype PropsType = {\n  imageUrl: string;\n  charName: string;\n  star: string;\n  rStar: string;\n  level: string;\n  power: string;\n  tier: string;\n};\n\nexport const getStars = (rStar: string, star: string) => {\n  let countYellowStars = +star - +rStar > 0 ? +star - +rStar : 0;\n  let redStar = +rStar;\n  let restStar = 7 - +star >= 0 ? 7 - +star : 0;\n  let emptyRStar;\n\n  if (+rStar > +star) {\n    emptyRStar = +rStar - +star;\n    redStar = +star;\n    restStar = 7 - (emptyRStar + redStar);\n  }\n\n  return {\n    redStar: redStar,\n    greyStar: restStar,\n    yellowStar: countYellowStars,\n    emptyRStar: +rStar > +star ? +rStar - +star : 0\n  };\n};\n\nconst StarIcon = ({ color, icon }: { color: string; icon: any }) => (\n  <StarListItem>\n    <FontAwesomeIcon icon={icon} color={color} size=\"xs\" />\n  </StarListItem>\n);\n\nconst Character = ({\n  imageUrl,\n  charName,\n  level,\n  power,\n  star,\n  rStar,\n  tier\n}: PropsType) => {\n  const stars = getStars(rStar, star);\n\n  return (\n    <Wrapper>\n      <ImageWrapper>\n        <img src={`${imageUrl}?v=1`} alt={charName} />\n      </ImageWrapper>\n      <CircleBg />\n      <StyledTierGrow tier={+tier} />\n      <InfoOverlay>\n        <Level>LVL {level}</Level>\n        <Power>{R.replace(\",\", \"\", power)}</Power>\n        <CharName>{charName}</CharName>\n        <StarList>\n          {stars.redStar > 0 &&\n            R.repeat(\n              <StarIcon icon={[\"fas\", \"star\"]} color=\"var(--red)\" />,\n              stars.redStar\n            )}\n          {stars.emptyRStar > 0 &&\n            R.repeat(\n              <StarIcon icon={[\"far\", \"star\"]} color=\"var(--red)\" />,\n              stars.emptyRStar\n            )}\n          {stars.yellowStar > 0 &&\n            R.repeat(\n              <StarIcon icon={[\"fas\", \"star\"]} color=\"var(--yellow)\" />,\n              stars.yellowStar\n            )}\n          {stars.greyStar > 0 &&\n            R.repeat(\n              <StarIcon icon={[\"fas\", \"star\"]} color=\"#999\" />,\n              stars.greyStar\n            )}\n        </StarList>\n      </InfoOverlay>\n    </Wrapper>\n  );\n};\n\nCharacter.defaultProps = {\n  power: \"0\",\n  imageUrl: \"\",\n  charName: \"\",\n  level: \"0\",\n  star: \"0\",\n  rStar: \"0\",\n  tier: \"0\"\n};\n\nexport default Character;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport * as R from \"ramda\";\nimport Character from \"../components/Character\";\n\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  grid-template-rows: auto;\n  grid-column-gap: 1rem;\n  justify-content: center;\n`;\n\nconst Roster = ({\n  computeData,\n  className\n}: {\n  computeData: string[][];\n  className?: string;\n}) => {\n  return (\n    <GridWrapper className={className}>\n      {R.isEmpty(computeData) && <h1>Loading...</h1>}\n      {computeData &&\n        computeData.map(char => {\n          const imageUrl = `${process.env.PUBLIC_URL}/images/${char[0]}.png`;\n          return (\n            <Character\n              key={char[0]}\n              imageUrl={imageUrl}\n              charName={char[0]}\n              star={char[11]}\n              rStar={char[12]}\n              level={char[13]}\n              tier={char[18]}\n              power={char[19]}\n            />\n          );\n        })}\n    </GridWrapper>\n  );\n};\n\nexport default Roster;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport useSheetApi from \"../hooks/useSheetApi\";\nimport { filterArrayValueByArray } from \"../utils/filterArrayValue\";\nimport Roster from \"../components/Roster\";\nimport * as R from \"ramda\";\nimport { StateContext } from \"../App\";\n\nconst params = {\n  spreadsheetId: \"1XoNQlKdUsCMQ0Ew6g5q_nqQuJMccv8XrAbkDypJQdqI\",\n  sheetRange: \"Sorted!B2:U103\",\n  apiKey: process.env.REACT_APP_API_KEY as string,\n  majorDimension: \"ROWS\"\n};\n\nexport type DataType = {\n  values: string[][];\n};\n\nconst RosterContainer = () => {\n  const data = useContext(StateContext);\n  const [computeData, setComputeData] = useState(data.values);\n\n  useEffect(() => {\n    (() => setComputeData(data.values))();\n  }, [data]);\n\n  const traits: DataType = useSheetApi({\n    ...params,\n    sheetRange: \"Traits!A1:AF1\",\n    majorDimension: \"COLUMNS\"\n  });\n  const traitsChars: DataType = useSheetApi({\n    ...params,\n    sheetRange: \"Traits!A2:AF55\",\n    majorDimension: \"COLUMNS\"\n  });\n\n  return (\n    <React.Fragment>\n      {traits.values &&\n        R.flatten(traits.values).map((trait, i) => {\n          return (\n            <button\n              onClick={() =>\n                setComputeData(\n                  filterArrayValueByArray(data.values, traitsChars.values[i])\n                )\n              }\n            >\n              View {trait}\n            </button>\n          );\n        })}\n\n      <Roster computeData={computeData} />\n    </React.Fragment>\n  );\n};\n\nexport default RosterContainer;\n","import * as R from \"ramda\";\n\nexport const getTotalPowers = R.map<string[][], number[]>(\n  R.compose<string, string, string, number>(\n    Number,\n    R.replace(\",\", \"\"),\n    R.replace(\"FALSE\", \"\"),\n    // @ts-ignore\n    R.findLast(R.pathOr(\"FALSE\", [0]))\n  )\n);\n\nexport const getTotalPower = (powers: string[][]) =>\n  // @ts-ignore\n  R.sum(getTotalPowers(powers));\n","import React, { useContext } from \"react\";\nimport { StateContext } from \"../App\";\nimport { filterArrayValueByArray } from \"../utils/filterArrayValue\";\nimport Roster from \"./Roster\";\nimport styled from \"styled-components\";\nimport { getTotalPower } from \"../utils/getTotalPower\";\n\nconst GridWrapper = styled.section`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));\n  grid-template-rows: auto;\n  grid-row-gap: 2em;\n`;\n\nconst NarrowedCharList = styled(Roster)`\n  grid-template-columns: repeat(3, 140px);\n  grid-column-gap: 0;\n\n  > div {\n    &:first-child {\n      grid-column-start: 2;\n    }\n\n    &:first-child,\n    &:nth-child(2) {\n      margin-left: -110%;\n    }\n  }\n`;\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  font-size: 24px;\n  margin: 0;\n  text-transform: uppercase;\n`;\n\nconst PowerText = styled.span`\n  color: var(--light-grey);\n  font-size: 18px;\n  margin-right: 4px;\n`;\n\nconst PowerAmount = styled.span`\n  color: var(--yellow);\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nconst Teams = () => {\n  const data = useContext(StateContext);\n  const tech = [\n    \"Minn-Erva\",\n    \"Crossbones\",\n    \"Star-Lord\",\n    \"Rocket Raccoon\",\n    \"Vision\"\n  ];\n  const shield = [\n    \"Nick Fury\",\n    \"S.H.I.E.L.D. Assault\",\n    \"S.H.I.E.L.D. Medic\",\n    \"S.H.I.E.L.D. Security\",\n    \"S.H.I.E.L.D. Operative\"\n  ];\n  const defenders = [\n    \"Iron Fist\",\n    \"Punisher\",\n    \"Daredevil\",\n    \"Jessica Jones\",\n    \"Luke Cage\"\n  ];\n  const brotherhood = [\n    \"Magneto\",\n    \"Pyro\",\n    \"Juggernaut\",\n    \"Mystique\",\n    \"Sabretooth\"\n  ];\n  const guardians = [\"Rocket Raccoon\", \"Star-Lord\", \"Gamora\", \"Groot\", \"Drax\"];\n  const spiderVerse = [\n    \"Venom\",\n    \"Carnage\",\n    \"Spider-man\",\n    \"Spider-man (Miles)\",\n    \"Green Goblin\"\n  ];\n\n  const techTeam = filterArrayValueByArray(data.values, tech);\n  const techTeamPower = getTotalPower(techTeam);\n  const shieldTeam = filterArrayValueByArray(data.values, shield);\n  const shieldTeamPower = getTotalPower(shieldTeam);\n  const defendersTeam = filterArrayValueByArray(data.values, defenders);\n  const defendersTeamPower = getTotalPower(defendersTeam);\n  const brotherhoodTeam = filterArrayValueByArray(data.values, brotherhood);\n  const brotherhoodTeamPower = getTotalPower(brotherhoodTeam);\n  const guardiansTeam = filterArrayValueByArray(data.values, guardians);\n  const guardiansTeamPower = getTotalPower(guardiansTeam);\n  const spiderVerseTeam = filterArrayValueByArray(data.values, spiderVerse);\n  const spiderVerseTeamPower = getTotalPower(spiderVerseTeam);\n\n  return (\n    <GridWrapper>\n      <div>\n        <Header>\n          <Title>Tech</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{techTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={techTeam} />\n      </div>\n\n      <div>\n        <Header>\n          <Title>shield</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{shieldTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={shieldTeam} />\n      </div>\n\n      <div>\n        <Header>\n          <Title>defenders</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{defendersTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={defendersTeam} />\n      </div>\n\n      <div>\n        <Header>\n          <Title>brotherhood</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{brotherhoodTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={brotherhoodTeam} />\n      </div>\n\n      <div>\n        <Header>\n          <Title>guardians</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{guardiansTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={guardiansTeam} />\n      </div>\n\n      <div>\n        <Header>\n          <Title>spider Verse</Title>\n          <div>\n            <PowerText>Power</PowerText>\n            <PowerAmount>{spiderVerseTeamPower}</PowerAmount>\n          </div>\n        </Header>\n        <NarrowedCharList computeData={spiderVerseTeam} />\n      </div>\n    </GridWrapper>\n  );\n};\n\nexport default Teams;\n","import React, { createContext } from \"react\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faStar as fasFaStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { faStar as farFaStar } from \"@fortawesome/free-regular-svg-icons\";\nimport Roster, { DataType } from \"./containers/Roster\";\nimport { Tabs } from \"antd\";\nimport styled from \"styled-components\";\n// @ts-ignore\nimport styles from \"antd/lib/tabs/style/index.css\";\nimport useSheetApi from \"./hooks/useSheetApi\";\nimport Teams from \"./components/Teams\";\n\nconst params = {\n  spreadsheetId: \"1XoNQlKdUsCMQ0Ew6g5q_nqQuJMccv8XrAbkDypJQdqI\",\n  sheetRange: \"Sorted!B2:U103\",\n  apiKey: process.env.REACT_APP_API_KEY as string,\n  majorDimension: \"ROWS\"\n};\n\nconst { TabPane } = Tabs;\n\nconst StyledTabs = styled.div`\n  ${styles};\n\n  && {\n    .ant-tabs {\n      color: #fff;\n      text-transform: uppercase;\n    }\n  }\n`;\n\nexport const StateContext = createContext({ values: [[\"\"]] });\n\nlibrary.add(fasFaStar, farFaStar);\n\nconst App: React.FC = () => {\n  const data: DataType = useSheetApi({ ...params });\n\n  return (\n    <StateContext.Provider value={data}>\n      <GlobalStyles />\n\n      <StyledTabs>\n        <Tabs\n          defaultActiveKey=\"roster\"\n          size=\"large\"\n          animated={{ tabPane: false, inkBar: true }}\n        >\n          <TabPane key=\"roster\" tab=\"roster\">\n            <Roster />\n          </TabPane>\n          <TabPane key=\"teams\" tab=\"teams\">\n            <Teams />\n          </TabPane>\n        </Tabs>\n      </StyledTabs>\n    </StateContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}